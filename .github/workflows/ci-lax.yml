# Continuous integration to Docker Hub, with selectable auditing.
name: BuildLax

on:
  workflow_dispatch:
    inputs:
      run_lint:
        description: 'Lint with RuboCop?'
        required: true
        type: boolean
        default: false
      run_brakeman:
        description: 'Audit app with Brakeman?'
        required: true
        type: boolean
        default: true
      run_bundle_audit:
        description: 'Audit dependencies with bundle-audit?'
        required: true
        type: boolean
        default: false

  push:
    branches:
      - 'rails-6'
  pull_request:
    branches:
      - 'rails-6'

jobs:
  audit:
    name: Selective Audit
    uses: ./.github/workflows/rubyonrails-lint.yml
    with:
      # Only run each audit if the user has specified to do so.
      skip-lint: ${{ ! inputs.run_lint }}
      skip-deps-audit: ${{ ! inputs.run_bundle_audit }}
      skip-app-audit: ${{ ! inputs.run_brakeman }}

  tests:
    name: Run tests
    uses: ./.github/workflows/run-tests.yml

  docker:
    name: 'Extract metadata, Build and push to Docker Hub'
    runs-on: ubuntu-latest
    needs: [ audit, tests ]
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Get Ruby version
        id: ruby
        run: |
          echo "GRB working directory: `pwd`"
          echo "GRB directory listing: `ls -l`"
          echo "ruby-version=`cat .ruby-version`" >> $GITHUB_OUTPUT
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: jmessenger/maint-autobuild-lax
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            RUBY_VERSION=${{ steps.ruby.outputs.ruby-version }}
